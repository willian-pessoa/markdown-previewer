{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["converter","require","Converter","placeholder","App","useState","markdown","setMarkdown","className","FormGroup","controlId","Form","Label","Control","id","as","value","onChange","event","updateMarkdown","target","dangerouslySetInnerHTML","__html","makeHtml","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAMMA,EAAY,IADAC,EAAQ,IACKC,WA0B/B,IAAMC,EAAW,uwBAoCFC,EA5Df,WACE,MAAgCC,mBAASF,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAMA,OAEE,sBAAKC,UAAU,gBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,eAACC,EAAA,EAAD,CAAWC,UAAU,uBAArB,UACE,cAACC,EAAA,EAAKC,MAAN,UAAY,kDACZ,cAACD,EAAA,EAAKE,QAAN,CAAcC,GAAG,SAASC,GAAG,WAAWZ,YAAY,iBAAiBa,MAAOV,EAAUW,SAAU,SAACC,GAAD,OAVjF,SAACZ,GACtBC,EAAYD,GASmGa,CAAeD,EAAME,OAAOJ,eAGzI,sBAAKR,UAAU,UAAf,UACE,iDACA,qBAAKM,GAAG,UAAUO,wBAAyB,CAACC,OAAQtB,EAAUuB,SAASjB,aCdhEkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ee7b6d4.chunk.js","sourcesContent":["import './App.css';\nimport Form from 'react-bootstrap/Form'\nimport FormGroup from 'react-bootstrap/esm/FormGroup';\nimport { useState } from \"react\";\n\nconst showdown  = require('showdown');\nconst converter = new showdown.Converter();\n\nfunction App() {\n  const [markdown, setMarkdown] = useState(placeholder);\n\n  const updateMarkdown = (markdown) => {\n    setMarkdown(markdown);\n  }\n  \n  return (\n\n    <div className=\"App container\">\n      <div className=\"editor\">\n        <FormGroup controlId=\"formControlsTextarea\">\n          <Form.Label><h2>Markdown Input</h2></Form.Label>\n          <Form.Control id=\"editor\" as=\"textarea\" placeholder=\"Enter Markdown\" value={markdown} onChange={(event)=>updateMarkdown(event.target.value)}></Form.Control>\n        </FormGroup>\n      </div>\n      <div className=\"preview\">\n        <h2>Markdown Output</h2>\n        <div id=\"preview\" dangerouslySetInnerHTML={{__html: converter.makeHtml(markdown)}}></div>\n      </div>\n    </div>\n  );\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}